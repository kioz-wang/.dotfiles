#!/usr/bin/env bash
#
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([ScreenShooter based grim&slurp])
# ARG_VERSION([echo 1.0])
# ARG_OPTIONAL_BOOLEAN([save],[s],[save to filesystem])
# ARG_POSITIONAL_SINGLE([type],[(P)full|Select|activeWindow],[p])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='hvs'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_type="p"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_save="off"


print_help()
{
  printf '%s\n' "ScreenShooter based grim&slurp"
  printf 'Usage: %s [-h|--help] [-v|--version] [-s|--(no-)save] [<type>]\n' "$0"
  printf '\t%s\n' "<type>: (P)full|Select|activeWindow (default: 'p')"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' "-v, --version: Prints version"
  printf '\t%s\n' "-s, --save, --no-save: save to filesystem (off by default)"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -v|--version)
        echo 1.0
        exit 0
        ;;
      -v*)
        echo 1.0
        exit 0
        ;;
      -s|--no-save|--save)
        _arg_save="on"
        test "${1:0:5}" = "--no-" && _arg_save="off"
        ;;
      -s*)
        _arg_save="on"
        _next="${_key##-s}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_type "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

get_region_activewindow ()
{
  hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"'
}

get_title_activewindow ()
{
  hyprctl -j activewindow | jq -r '.title'
}

declare -r XDG_PICTURES_D="${HOME}/Pictures"
declare -r _ext="png"
declare -r _timestamp="$(date +%Y%m%d_%H%M%S)"
declare -r _2copy="- | wl-copy"

declare _type
declare _command="grim"
declare _region
declare _outfile
declare _notify_message

case ${_arg_type} in
  p|full)
    _type=full
    ;;
  s|select)
    _type=select
    _region="$(slurp)"
    _command="${_command} -g \"${_region}\""
    ;;
  w|activewindow)
    _type="win.$(get_title_activewindow)"
    _region="$(get_region_activewindow)"
    _command="${_command} -g \"${_region}\""
    ;;
  *)
    die "Error during type parsing, unknow ${_arg_type}" 1 ;;
esac

if [[ "${_arg_save}" == on ]]; then
  _outfile="${XDG_PICTURES_D}/ss.${_type}.${_timestamp}.${_ext}"
  _command="${_command} ${_outfile}"
  _notify_message="Saved to ${_outfile}"
else
  _command="${_command} ${_2copy}"
  if [[ -n "${_region}" ]]; then
    _notify_message="Copied ${_type} (${_region})"
  else
    _notify_message="Copied fullscreen"
  fi
fi

declare -i _ret

${_command}
_ret=$?
if (( _ret == 0 )); then
  notify-send "ScreenShooter" "${_notify_message}"
else
  notify-send "ScreenShooter" "Fail to exec \{${_command}\} (${_ret})"
fi

# ] <-- needed because of Argbash
